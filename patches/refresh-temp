Bottom: 7af76078e335d5acccea9e83cb4e86eea842ce74
Top:    ca9c46877a96db574c5387990a9f437b760e32f3
Author: Sean Hefty <sean.hefty@intel.com>
Date:   2012-07-26 16:17:30 -0700

Refresh of mpi-finalize

---

diff --git a/src/preload.c b/src/preload.c
index 515cc10..026ff1c 100644
--- a/src/preload.c
+++ b/src/preload.c
@@ -798,12 +798,9 @@ int select(int nfds, fd_set *readfds, fd_set *writefds,
 	return ret;
 }
 
-#include <stdio.h>
-
 int shutdown(int socket, int how)
 {
 	int fd;
-	printf("shutdown how %s\n", how == SHUT_RDWR ? "RDWR" : how == SHUT_RD ? "RD" : "WR");
 	fflush(stdout);
 	return (fd_get(socket, &fd) == fd_rsocket) ?
 		rshutdown(fd, how) : real.shutdown(fd, how);
diff --git a/src/rsocket.c b/src/rsocket.c
index ed125b3..d374af7 100644
--- a/src/rsocket.c
+++ b/src/rsocket.c
@@ -1708,6 +1708,7 @@ int rshutdown(int socket, int how)
 	int ctrl, ret = 0;
 
 	rs = idm_at(&idm, socket);
+	printf("rshutdown %d - %p {\n", socket, rs);
 	if (how == SHUT_RD) {
 		rs_shutdown_state(rs, rs_connect_rd);
 		return 0;
@@ -1726,7 +1727,9 @@ int rshutdown(int socket, int how)
 				RS_CTRL_SHUTDOWN : RS_CTRL_DISCONNECT;
 		}
 		if (!rs_can_send_ctrl(rs)) {
+			printf("  rshutdown - need ctrl msg %d - %p\n", socket, rs);
 			ret = rs_process_cq(rs, 0, rs_can_send_ctrl);
+			printf("  rshutdown - have ctrl msg %d - %p\n", socket, rs);
 			if (ret)
 				return ret;
 		}
@@ -1735,14 +1738,21 @@ int rshutdown(int socket, int how)
 		ret = rs_post_write(rs, 0, NULL, 0,
 				    rs_msg_set(RS_OP_CTRL, ctrl),
 				    0, 0, 0);
+		if (ret)
+			printf("rs_post_write failed %d %s\n", ret, strerror(errno));
 	}
 
 	if (!rs_all_sends_done(rs) && !(rs->state & rs_error))
+	{
+		printf("  rshutdown - need sends %d - %p\n", socket, rs);
 		rs_process_cq(rs, 0, rs_all_sends_done);
+		printf("  rshutdown - have sends %d - %p\n", socket, rs);
+	}
 
 	if ((rs->fd_flags & O_NONBLOCK) && (rs->state & rs_connected))
 		rs_set_nonblocking(rs, 1);
 
+	printf("} rshutdown %d - %p\n", socket, rs);
 	return 0;
 }
 
@@ -1751,9 +1761,11 @@ int rclose(int socket)
 	struct rsocket *rs;
 
 	rs = idm_at(&idm, socket);
+	printf("rclose %d - %p {\n", socket, rs);
 	if (rs->state & rs_connected)
 		rshutdown(socket, SHUT_RDWR);
 
+	printf("} rclose %d - %p\n", socket, rs);
 	rs_free(rs);
 	return 0;
 }
